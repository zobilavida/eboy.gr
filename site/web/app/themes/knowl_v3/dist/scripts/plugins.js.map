{"version":3,"sources":["../assets/scripts/plugins.js"],"names":["$","fn","appear","options","settings","extend","data","undefined","one","accX","accY","this","each","t","appeared","trigger","w","window","check","is","a","scrollLeft","b","scrollTop","o","offset","x","left","y","top","ax","ay","th","height","wh","tw","width","ww","modifiedFn","unbind","i","inArray","checks","splice","apply","arguments","bind","scroll","push","timeout","checkAll","length","run","clearTimeout","setTimeout","n","old","r","jQuery","countTo","defaults","loops","Math","ceil","speed","refreshInterval","increment","to","from","updateTimer","value","loopCount","_this","html","toFixed","decimals","onUpdate","call","clearInterval","interval","onComplete","setInterval"],"mappings":"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","file":"plugins.js","sourcesContent":["/*\n * jQuery.appear\n * https://github.com/bas2k/jquery.appear/\n * http://code.google.com/p/jquery-appear/\n *\n * Copyright (c) 2009 Michael Hixson\n * Copyright (c) 2012 Alexander Brovikov\n * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n */\n(function($) {\n    $.fn.appear = function(fn, options) {\n\n        var settings = $.extend({\n\n            //arbitrary data to pass to fn\n            data: undefined,\n\n            //call fn only on the first appear?\n            one: true,\n\n            // X & Y accuracy\n            accX: 0,\n            accY: 0\n\n        }, options);\n\n        return this.each(function() {\n\n            var t = $(this);\n\n            //whether the element is currently visible\n            t.appeared = false;\n\n            if (!fn) {\n\n                //trigger the custom event\n                t.trigger('appear', settings.data);\n                return;\n            }\n\n            var w = $(window);\n\n            //fires the appear event when appropriate\n            var check = function() {\n\n                //is the element hidden?\n                if (!t.is(':visible')) {\n\n                    //it became hidden\n                    t.appeared = false;\n                    return;\n                }\n\n                //is the element inside the visible window?\n                var a = w.scrollLeft();\n                var b = w.scrollTop();\n                var o = t.offset();\n                var x = o.left;\n                var y = o.top;\n\n                var ax = settings.accX;\n                var ay = settings.accY;\n                var th = t.height();\n                var wh = w.height();\n                var tw = t.width();\n                var ww = w.width();\n\n                if (y + th + ay >= b &&\n                    y <= b + wh + ay &&\n                    x + tw + ax >= a &&\n                    x <= a + ww + ax) {\n\n                    //trigger the custom event\n                    if (!t.appeared) t.trigger('appear', settings.data);\n\n                } else {\n\n                    //it scrolled out of view\n                    t.appeared = false;\n                }\n            };\n\n            //create a modified fn with some additional logic\n            var modifiedFn = function() {\n\n                //mark the element as visible\n                t.appeared = true;\n\n                //is this supposed to happen only once?\n                if (settings.one) {\n\n                    //remove the check\n                    w.unbind('scroll', check);\n                    var i = $.inArray(check, $.fn.appear.checks);\n                    if (i >= 0) $.fn.appear.checks.splice(i, 1);\n                }\n\n                //trigger the original fn\n                fn.apply(this, arguments);\n            };\n\n            //bind the modified fn to the element\n            if (settings.one) t.one('appear', settings.data, modifiedFn);\n            else t.bind('appear', settings.data, modifiedFn);\n\n            //check whenever the window scrolls\n            w.scroll(check);\n\n            //check whenever the dom changes\n            $.fn.appear.checks.push(check);\n\n            //check now\n            (check)();\n        });\n    };\n\n    //keep a queue of appearance checks\n    $.extend($.fn.appear, {\n\n        checks: [],\n        timeout: null,\n\n        //process the queue\n        checkAll: function() {\n            var length = $.fn.appear.checks.length;\n            if (length > 0) while (length--) ($.fn.appear.checks[length])();\n        },\n\n        //check the queue asynchronously\n        run: function() {\n            if ($.fn.appear.timeout) clearTimeout($.fn.appear.timeout);\n            $.fn.appear.timeout = setTimeout($.fn.appear.checkAll, 20);\n        }\n    });\n\n    //run checks when these methods are called\n    $.each(['append', 'prepend', 'after', 'before', 'attr',\n        'removeAttr', 'addClass', 'removeClass', 'toggleClass',\n        'remove', 'css', 'show', 'hide'], function(i, n) {\n        var old = $.fn[n];\n        if (old) {\n            $.fn[n] = function() {\n                var r = old.apply(this, arguments);\n                $.fn.appear.run();\n                return r;\n            }\n        }\n    });\n\n})(jQuery);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(function($) {\n    $.fn.countTo = function(options) {\n        // merge the default plugin settings with the custom options\n        options = $.extend({}, $.fn.countTo.defaults, options || {});\n\n        // how many times to update the value, and how much to increment the value on each update\n        var loops = Math.ceil(options.speed / options.refreshInterval),\n            increment = (options.to - options.from) / loops;\n\n        return $(this).each(function() {\n            var _this = this,\n                loopCount = 0,\n                value = options.from,\n                interval = setInterval(updateTimer, options.refreshInterval);\n\n            function updateTimer() {\n                value += increment;\n                loopCount++;\n                $(_this).html(value.toFixed(options.decimals));\n\n                if (typeof(options.onUpdate) == 'function') {\n                    options.onUpdate.call(_this, value);\n                }\n\n                if (loopCount >= loops) {\n                    clearInterval(interval);\n                    value = options.to;\n\n                    if (typeof(options.onComplete) == 'function') {\n                        options.onComplete.call(_this, value);\n                    }\n                }\n            }\n        });\n    };\n\n    $.fn.countTo.defaults = {\n        from: 0,  // the number the element should start at\n        to: 100,  // the number the element should end at\n        speed: 1000,  // how long it should take to count between the target numbers\n        refreshInterval: 100,  // how often the element should be updated\n        decimals: 0,  // the number of decimal places to show\n        onUpdate: null,  // callback method for every time the element is updated,\n        onComplete: null,  // callback method for when the element finishes updating\n    };\n})(jQuery);"],"sourceRoot":"assets/scripts/"}